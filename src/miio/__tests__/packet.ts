import {
  HandshakeRequest,
  MiIOResponse,
  NormalRequest,
  PacketImpl,
  RequestSerializer,
  ResponseDeserializer,
} from '../packet';

const TOKEN = Buffer.from('12345678901234567890123456789012', 'hex');

describe('RequestSerializer', () => {
  let serializer: RequestSerializer;

  beforeEach(() => {
    serializer = new RequestSerializer(TOKEN);
  });

  it('serialize handshake request correctly', () => {
    // prettier-ignore
    const buffer = Buffer.of(
      0x21, 0x31, 0x00, 32,
      0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff,
      0xff, 0xff, 0xff, 0xff
    );
    expect(serializer.serialize(new HandshakeRequest()).raw).toEqual(buffer);
  });

  it('serialize normal requests correctly', () => {
    // prettier-ignore
    const buffer = Buffer.of(
      0x21, 0x31, 0x00, 48,
      // Unknown
      0x00, 0x00, 0x00, 0x00,
      // Device ID: 5
      0x00, 0x00, 0x00, 0x05,
      // Stamp: 16
      0x00, 0x00, 0x00, 0x10,
      // Checksum
      0x42, 0x71, 0xbe, 0x9a,
      0xf7, 0x1b, 0x39, 0x23,
      0x48, 0x72, 0x82, 0xf7,
      0x40, 0x59, 0x6e, 0x39,
      // Data
      0x79, 0x91, 0x6f, 0xb5,
      0x31, 0x1e, 0x5d, 0x8c,
      0xfb, 0xde, 0xf9, 0xec,
      0x36, 0x98, 0xcb, 0x8f,
    );
    const request = new NormalRequest(5, 16, Buffer.from('Hello world!'));
    expect(serializer.serialize(request).raw).toEqual(buffer);
  });
});

describe('PacketImpl', () => {
  it('throws error when using magic number is incorrect', () => {
    // prettier-ignore
    const buffer = Buffer.of(
      0x00, 0x00, 0x00, 48,
      // Unknown
      0x00, 0x00, 0x00, 0x00,
      // Device ID: 5
      0x00, 0x00, 0x00, 0x05,
      // Stamp: 16
      0x00, 0x00, 0x00, 0x10,
      // Checksum
      0x42, 0x71, 0xbe, 0x9a,
      0xf7, 0x1b, 0x39, 0x23,
      0x48, 0x72, 0x82, 0xf7,
      0x40, 0x59, 0x6e, 0x39,
      // Data
      0x79, 0x91, 0x6f, 0xb5,
      0x31, 0x1e, 0x5d, 0x8c,
      0xfb, 0xde, 0xf9, 0xec,
      0x36, 0x98, 0xcb, 0x8f,
    );
    expect(() => PacketImpl.from(buffer)).toThrow('magic number');
  });

  it('throws error when packet length mismatch', () => {
    // prettier-ignore
    const buffer = Buffer.of(
      0x21, 0x31, 0x00, 32,
      // Unknown
      0x00, 0x00, 0x00, 0x00,
      // Device ID: 5
      0x00, 0x00, 0x00, 0x05,
      // Stamp: 16
      0x00, 0x00, 0x00, 0x10,
      // Checksum
      0x42, 0x71, 0xbe, 0x9a,
      0xf7, 0x1b, 0x39, 0x23,
      0x48, 0x72, 0x82, 0xf7,
      0x40, 0x59, 0x6e, 0x39,
      // Data
      0x40, 0x59, 0x6e, 0x39,
    );
    expect(() => PacketImpl.from(buffer)).toThrow('Packet length');
  });
});

describe('ResponseDeserializer', () => {
  let deserializer: ResponseDeserializer;

  beforeEach(() => {
    deserializer = new ResponseDeserializer(TOKEN);
  });

  it('parses handshake packet correctly', () => {
    // prettier-ignore
    const packet = PacketImpl.from(Buffer.of(
      0x21, 0x31, 0x00, 32,
      // Unknown
      0x00, 0x00, 0x00, 0x00,
      // Device ID: 5
      0x00, 0x00, 0x00, 0x05,
      // Stamp: 16
      0x00, 0x00, 0x00, 0x10,
      // Checksum
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00,
    ));
    const response = deserializer.deserialize(packet);
    expect(response).toEqual(new MiIOResponse(5, 16, Buffer.of()));
  });

  it('parses normal packet correctly', () => {
    // prettier-ignore
    const packet = PacketImpl.from(Buffer.of(
      0x21, 0x31, 0x00, 48,
      // Unknown
      0x00, 0x00, 0x00, 0x00,
      // Device ID: 5
      0x00, 0x00, 0x00, 0x05,
      // Stamp: 16
      0x00, 0x00, 0x00, 0x10,
      // Checksum
      0x42, 0x71, 0xbe, 0x9a,
      0xf7, 0x1b, 0x39, 0x23,
      0x48, 0x72, 0x82, 0xf7,
      0x40, 0x59, 0x6e, 0x39,
      // Data
      0x79, 0x91, 0x6f, 0xb5,
      0x31, 0x1e, 0x5d, 0x8c,
      0xfb, 0xde, 0xf9, 0xec,
      0x36, 0x98, 0xcb, 0x8f,
    ));
    const response = deserializer.deserialize(packet);
    expect(response).toEqual(
      new MiIOResponse(5, 16, Buffer.from('Hello world!'))
    );
  });
});
